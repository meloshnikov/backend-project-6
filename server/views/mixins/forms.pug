- const getInputName = (property) => `data[${property}]`
- const getInputId = (property) => `data_${property}`

mixin formFor(entity = null)
  form&attributes(attributes)
    block

mixin input(entity, propertyName, displayName, errors = {})
  - propertyErrors = _.get(errors, propertyName)
  - classLine = 'form-control' + (_.isEmpty(propertyErrors) ? '' : ' is-invalid')
  - inputId = getInputId(propertyName)
  .form-floating.mb-3(class=(errors[propertyName] && 'has-danger'))
    input(
      id=inputId
      name=getInputName(propertyName)
      class=classLine
      value=_.get(entity, propertyName, '')
      placeholder=displayName
    )&attributes(attributes)
    if !_.isEmpty(propertyErrors)
      .form-control-feedback.invalid-feedback= propertyErrors.map(({ message }) => message).join('. ')
    label(
      for=inputId
    )=displayName

mixin select(entity, propertyName, displayName,  opts = [], errors = {})
  - propertyErrors = _.get(errors, propertyName)
  - classLine = 'select form-control' + (_.isEmpty(propertyErrors) ? '' : ' is-invalid')
  - inputId = getInputId(propertyName)
  .form-floating.mb-3(class=(errors[propertyName] && 'has-danger'))
    select.form-control(
      id= inputId
      name=getInputName(propertyName)
      class=classLine
      value=_.get(entity, propertyName, '')
    )&attributes(attributes)
      option
      each opt in opts
        option(value=opt.id)= opt.name
    if !_.isEmpty(propertyErrors)
      .invalid-feedback= propertyErrors.map(({ message }) => message).join('. ')
    label(
      for= inputId
    )= displayName

mixin filterSelect(propertyName, displayName, items = [])
  - inputId = getInputId(propertyName)
  .mb-3.input-group
    label(
      class='input-group-text'
      for= inputId
    )=displayName
    select(
      id= inputId
      name= propertyName
      class='form-select'
    )&attributes(attributes)
      option
      each item in items
        if propertyName === 'executor'
          option(value= item.id selected= item.id == query[propertyName])= `${item.firstName} ${item.lastName}`
        else
          option(value= item.id selected= item.id == query[propertyName])= item.name

mixin checkbox(propertyName, labelName)
  - inputId = getInputId(propertyName)
  .mb-3.form-check
    input(
      id= inputId
      name= propertyName
      class='form-check-input'
      type='checkbox'
    )&attributes(attributes)
    label(
      class='form-check-label'
      for= inputId
    )= labelName

mixin textarea(entity, propertyName, displayName, errors = {})
  - propertyErrors = _.get(errors, propertyName)
  - classLine = 'form-control' + (_.isEmpty(propertyErrors) ? '' : ' is-invalid')
  - inputId = getInputId(propertyName)
  .form-floating.mb-3(class=(errors[propertyName] && 'has-danger'))
    textarea.form-control(
      id=inputId
      name=getInputName(propertyName)
      class=classLine
      placeholder=displayName
    )&attributes(attributes) #{_.get(entity, propertyName, '')}
    if !_.isEmpty(propertyErrors)
      .form-control-feedback.invalid-feedback= propertyErrors.map(({ message }) => message).join('. ')
    label(
      for= inputId
    )= displayName

mixin submit(form = null)
  input(class='btn btn-primary' type='submit')&attributes(attributes)

mixin buttonTo(action, method)
  form(action=action, method="post")
    input(name="_method" type="hidden" value=method)
    input(type='submit')&attributes(attributes)
